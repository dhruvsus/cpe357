#!/bin/tcsh -f 


set testonly=0

if ( $?GRADINGMODE ) then
  set testonly=1
endif


#set verbose
set debug=0
set logall=0


set requireMakefile=0
set prog=parseline
set timeout=10
set diffargs="-bBw"
set fmt="%6d) %-55s... "
set asgn=asgn5

set hostname=`hostname`
if ( $hostname == "angora.home" ||\
     $hostname == "lagniappe.csc.calpoly.edu" ) then
  set classroot=/home/pnico/CalPoly/Class/cpe357/now/
  set lib=$classroot/Asgn/Handin/lib/$asgn
  set logprog="echo logprog"
#  set logprog="/home/pnico/CalPoly/Class/cpe357/2011-01/Asgn/Handin/lib/$asgn/src/logit.$asgn.Linux"
    set reference=/home/pnico/Class/cpe357/now/Asgn/asgn5/Soln/$prog
  set bindir=/home/pnico/bin
else # CSL
  set lib=/home/pn-cs357/lib/$asgn/
  set logprog=/home/pn-cs357/lib/$asgn/logit.$asgn
  set reference=/home/pn-cs357/demos/$prog
  # add my bindir to the head of the path
  set path = ( /home/pnico/bin $path )
endif

set longlines=longlines.pl
set timelimet=timelimit
set iolimit=iolimit

set testdir=$lib/Tests
set cmddir=$testdir/commands
set datadir=$testdir/Inputs

set exitstatus = 0
set whichones=""

set details=t_details.$$
set reffile=t_reference.$$
set outfile=t_outfile.$$
set errfile=t_errfile.$$
set diffout=t_diffsout.$$
set sfile=t_script.$$
set input=t_input.$$

set itercleanfiles=( $reffile $outfile $errfile $diffout $sfile $input )
set cleanupfiles=( $itercleanfiles $details )

# Because of the nature of this program, line and character limits
# for the tests will be set for each test
set limitlines=500
set limitchars=16384
set cdelta=100
set ldelta=2

set difflimitlines = 20
set difflimitchars = 4096


if ( -f $details ) then
  rm $details 
endif

onintr bail

if ( ! $testonly ) then
  if ( $exitstatus == 0 ) then
    echo ""
    echo "------------------------"
    echo "Looking for source files"
    echo "------------------------"
    echo ""
    set nonomatch
    if ( *.[ch] != '*.[ch]' ) then
      set src = ( *.[ch] )
      echo "Found: $src"
    else
      echo "***** No C source files found.  "
      echo "***** Are you sure you're in the right directory?"
      echo ""
      set exitstatus = -1
    endif
  endif

  if ( $exitstatus == 0 && $requireMakefile ) then
    echo ""
    echo "-----------------------"
    echo "Looking for a Makefile"
    echo "----------------------"
    echo ""

    if ( $exitstatus == 0 ) then
      if ( -f Makefile ) then
        echo "Found: Makefile"
      else if ( -f makefile ) then 
        echo "Found: makefile"
      else 
        echo ""
        echo "***** No Makefile found."
        echo ""
        set exitstatus = -2
      endif
    endif
  endif

  if ( $exitstatus == 0 ) then
    echo ""
    echo "--------------------------------"
    echo "Checking for long lines (no program should have any lines > 80 chars)"
    echo "(run ~pnico/bin/longlines.pl on your files to check.)"
    echo "--------------------------------"
    echo ""
    if ( ! { $longlines $src } ) then
       set exitstatus=-3
    else
       echo "Line length ok."
    endif
    echo ""
  endif

  if ( $exitstatus == 0 ) then
    if ( -f [Mm]akefile ) then
      echo "Found: Makefile"
      set cmd = ( make $prog )
    else 
      set cmd = ( gcc -pedantic -Wall -o $prog *c ) 
    endif

    echo ""
    echo "------------------------------------"
    echo "Building the application:" \"$cmd\"
    echo "------------------------------------"
    echo ""

    echo "$cmd" 
    if ( ! { $cmd } ) then
      echo ""
      echo "Unable to compile $prog."
      set exitstatus = -4
    endif
  endif
endif  # end not testonly section

if ( $exitstatus == 0 ) then
  echo ""
  echo "---------------"
  echo "checking for executable"
  echo "---------------"
  echo ""

  if ( ! -x $prog ) then
    echo "program $prog not found."
    set exitstatus = -5
  endif
endif


if ( $exitstatus == 0 ) then
  echo ""
  echo "------------------------"
  echo "Running the application "
  echo "------------------------"
  echo ""

  echo ""
  echo "--------------------------------------------------------"
  echo "Test Results:"
  echo "   These are the results of trying your $prog against"   
  echo "mine on a number of different test cases. "
  echo ""
  echo "  The output of your version of $prog is compared to "
  echo "the output of ~pn-cs357/demos/$prog using diff (1)."
  echo "If they differ the test case is a failure."
  echo ""
  if ( ! $?GRADINGMODE ) then
    echo "  The test commands are located in $cmddir and the"
    echo "associated data are in $datadir"
    echo ""
  endif
  echo "  Note:  The early usage tests give bad arguments and expect"
  echo "a non-zero exit status and see a message of the form:"
  echo \""usage: $prog [ -c ] [ -d ] set1 [ set2 ]"\" "The message"
  echo "doesn't have to be exactly the same, but it's looking for the"
  echo "word "\"usage\".
  echo ""
  echo "  Each command is run with a timeout of 10 seconds, so "
  echo "if your program takes longer than that, it will be interrupted."
  echo ""

  echo ""
  echo "Tests:"

  set tests=0  
  set pass=0  

  foreach cmd ( $cmddir/[0-9]*[^~] ) 
#  foreach cmd ( $cmddir/03*cmd ) 
    if ( -f $diffout ) rm $diffout
    @ tests++

    set cdesc=`grep NAME: $cmd | sed 's/.*://'`
    grep INPUT: $cmd | sed 's/.*://' > $input
    set sfail=`grep SHOULDFAIL: $cmd | sed 's/.*://' | tr '[A-Z]' '[a-z]' | tr -d ' 	'`

    if ( $debug ) then
      echo ""
      echo "cdesc: "\"$cdesc\"
      echo "sfail: "\"$sfail\"
      echo "charlimit: "\"$charlimit\"
      echo "linelimit: "\"$linelimit\"
      echo "cfail: $cfail"
      echo ""
    endif

    # Announce the test
    printf "$fmt" $tests "$cdesc"

    if ( $debug  ) then
      echo limitlines: $limitlines
      echo limitchars: $limitchars
    endif

    # if not expepected to fail, run the reference command disposing of
    # stderr
    ( $reference < $input > $reffile ) >& /dev/null

    # now run the submitted program capturing stdout, stderr, and console
    set cmd = "./$prog < $input 2> $errfile | iolimit $limitlines $limitchars > $outfile 2>&1"

    (setenv SHELL /bin/sh; \
  	    script -q -c "timelimit $timeout $cmd" $sfile) >& /dev/null
  	   # append console output (from script) to errfile..
    tail -n +2 $sfile | tr -d '\r' | sed 's/line://i' >> $errfile

    # remove "line:" from the regular output
    sed 's/line://i' $outfile > $outfile.bak
    mv $outfile.bak $outfile

    # now we have the regular and error output 

    set fail=0
    set outcome="Unknown (what happened?)"
    if ( "$sfail" == "yes" ) then
      if ( ! -z $errfile ) then
        @ pass ++
	set outcome = "ok."
      else 
        set outcome="FAILURE (expected error message on stderr)"
        set fail=1
      endif
    else if ( $sfail == "no" ) then
      # it's expected to pass, do the diff
      if ( ! { ( diff $diffargs $reffile $outfile >& $diffout ) } ||\
	! -z $errfile ) then
        # they're different
        set outcome="FAILURE."
        set fail=1
      else
        # they're the same
        set outcome="ok."
	@ pass++
      endif
    else if ( $sfail == "maybe" ) then
      # it's allowed to pass or fail.
      if ( ! { ( diff $diffargs $reffile $outfile >& $diffout ) } && \
	-z $errfile ) then
        # they're different with no error message
        set outcome="FAILURE."
        set fail=1
      else
        # they're the same or there is an error message
        set outcome="ok."
	@ pass++
      endif
    else
        set outcome="UNKNOWN?"
        set fail=1
    endif

    # if it's a failure, add details to the details file
    if ( $fail || $logall ) then
      echo "" >> $details
      echo "==========================================" >> $details
      echo "$tests) $cdesc  ($outcome)"                 >> $details
      echo "  cmd: "\"`cat $input`\"             >> $details
      echo "==========================================" >> $details

      # First the output
      if ( -f $outfile && ! -z $outfile ) then
      	 echo "  --------------------------" >> $details
      	 echo "  Submitted's stdout:" >> $details
      	 cat -v $outfile | iolimit $difflimitlines $difflimitchars |& sed 's/^/    /g' >> $details
	 echo "" >> $details
      	 echo "  --------------------------" >> $details
      endif

      if ( -f $errfile && ! -z $errfile ) then
      	 echo "  --------------------------" >> $details
      	 echo "  Submitted's stderr:" >> $details
      	 cat -v $errfile | iolimit $difflimitlines $difflimitchars |& sed 's/^/    /g' >> $details
	 echo "" >> $details
      	 echo "  --------------------------" >> $details
      endif

      # if the test failed, show the reference and the diffs
      if ( $fail ) then
      	if ( -f $reffile && ! -z $reffile ) then
      		 echo "  --------------------------" >> $details
      		 echo "  Reference output:" >> $details
      		 cat -v $reffile | iolimit $difflimitlines $difflimitchars |& sed 's/^/    /g' >> $details
      		 echo "  --------------------------" >> $details
      	endif

      	if ( -f $diffout && ! -z $diffout ) then
      	  echo "  --------------------------" >> $details
      	  echo "  Diff $diffargs (< Reference > Submitted):" >> $details
      	  cat -v $diffout | iolimit $difflimitlines $difflimitchars |& sed 's/^/    /g' >> $details
	  echo "" >> $details
      	  echo "  --------------------------" >> $details
	endif
      endif

    endif

    # report what happend.
    echo $outcome
    set whichones=$whichones$fail

    # clean up for next time.
    rm -f $itercleanfiles
  end
#  echo "--------------------------------------------------------"
  echo "Passed $pass out of $tests tests."

  echo ""
  @ exitstatus= $tests - $pass
endif

endgame:
  if ( ! $exitstatus ) then
    echo "Passed all tests."
  else
    echo "FAILED."
      echo ""
      echo ""
    if ( -f $details ) then
      echo ""
      echo "#############################"
      echo "# Failure details are below #"
      echo "#############################"
      echo ""
      cat $details
    endif
  endif

  $logprog  $exitstatus "$whichones"

  rm -f $cleanupfiles
  exit $exitstatus;

bail:
    set exitstatus=-7
    echo ""
    echo "Interrupted"
    echo ""
    goto endgame




